import { FormData, WeldConnection } from './types';

const TEMPLATE_BASE64 = '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';

export async function generateWordDocument(formData: FormData, connections: WeldConnection[]) {
  try {
    const dataForTemplate = {
      lab_name: formData.labName,
      certificate: formData.certificate,
      norm_doc: formData.normDoc,
      otk_number: formData.otkNumber,
      radiation_source: formData.radiationSource,
      detector: formData.detector,
      protective_screen: formData.protectiveScreen,
      amplifier: formData.amplifier,
      vik_number: formData.vikNumber,
      vik_date: formData.vikDate,
      conclusion_number: formData.conclusionNumber,
      conclusion_date: new Date(formData.conclusionDate).toLocaleDateString('ru-RU'),
      object_name: formData.objectName,
      quality_level: formData.qualityLevel,
      control_volume: formData.controlVolume,
      route_name: formData.routeName,
      pipeline_section: formData.pipelineSection,
      contractor: formData.contractor,
      customer: formData.customer,
      welder_mark: formData.welderMark,
      controller_name: formData.controllerName,
      controller_level: formData.controllerLevel,
      controller_certificate: formData.controllerCertificate,
      control_date: new Date(formData.controlDate).toLocaleDateString('ru-RU'),
      connections: connections.map(conn => ({
        number: conn.number,
        diameter: conn.diameter,
        section: conn.section,
        sensitivity: conn.sensitivity,
        coordinates: conn.coordinates,
        defects: conn.defects,
        conclusion: conn.conclusion,
        notes: conn.notes,
      })),
    };

    const response = await fetch('https://functions.yandexcloud.net/d4euokpfpmr9u0r4vpbv', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        template: TEMPLATE_BASE64,
        data: dataForTemplate,
      }),
    });

    const result = await response.json();

    if (result.file) {
      const blob = new Blob(
        [Uint8Array.from(atob(result.file), (c) => c.charCodeAt(0))],
        { type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' }
      );
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `Заключение_${formData.conclusionNumber}.docx`;
      link.click();
      URL.revokeObjectURL(url);
    } else {
      throw new Error('Не удалось получить файл от сервера');
    }
  } catch (error) {
    console.error('Ошибка генерации Word документа:', error);
    throw error;
  }
}
