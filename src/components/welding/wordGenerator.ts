import { FormData, WeldConnection } from './types';

const TEMPLATE_BASE64 = 
  'UEsDBBQABgAIAAAAIQDcamkykQEAACwHAAATAAgCW0NvbnRlbnRfVHlwZXNdLnhtbCCiBAIooAAC' +
  'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' +
  'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' +
  'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' +
  'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' +
  'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' +
  'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' +
  'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' +
  'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' +
  'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' +
  'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' +
  'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArJVNT8MwDIbvSPyH' +
  'Kle0ZuOAEFq3Ax9HmMSQuIbE3SLypcT7+ve461YhGHRi9FKptf2+T2zVGY7X1mRLiEl7V7BB3mcZ' +
  'OOmVdrOCvUwfetcsSyicEsY7KNgGEhuPzs+G002AlFG1SwWbI4YbzpOcgxUp9wEcRUofrUB6jTMe' +
  'hHwXM+CX/f4Vl94hOOxhpcFGwzsoxcJgdr+mzzVJBJNYdlsnVl4FEyEYLQVSnC+d+uLS2znkVLnN' +
  'SXMd0gUlMH7QoYr8bLCre6LWRK0gm4iIj8JSFl/5qLjycmKpMv9d5gCnL0stoamv1EL0ElKinluT' +
  'NxErtNvzH+KQi4TevlrDNYKdRB/S4GScRrTSg4gamh7+2IuEGwPp/ztR67bbAyIVdAGwU25FWMH' +
  'bc2cUn8RbQUrv0XnsYhqNdCsEONURw165FWEOQkE8/Xf4RlALHzEH8hNvBrqYw066FQJpG0P9PL0T' +
  'W5nfLClzu4Nou8c/HHu/vqvqXjhq+TSOJH3y+aC6GRSoA958e9eNPgAAAP//AwBQSwMEFAAGAAgA' +
  'AAAhAB6RGrfvAAAATgIAAAsACAJfcmVscy8ucmVscyCiBAIooAACAAAAAAAAAAAAAAAAAAAAAAAAAA' +
  'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' +
  'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' +
  'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' +
  'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' +
  'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' +
  'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' +
  'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' +
  'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' +
  'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' +
  'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArJJNT8Mw' +
  'DIbvSPyHyPdN3RgIte1O7MJxAglVcI5IdE2IJlXicfjvuF3ZYAwd4pbXH/bjyJ0+fcpKfKBxUrWY' +
  'JDEmqLgqhdq3+Ol5c7vCxFpWclYpVC1+QotP68vzTi9LPdAOuPBAWgF1LS6c6zPGbF2jZDZRPSp/' +
  '0yglmU/UHvOeISut5xWLEE1JypRE+W1kVu/SbKKkGlyPP3zBwkq1v5AplnsfKXojvIL1M9xKhc5o' +
  'VOoNlROHDrWoHJfOSbv8F3JVSs87Q/R8OgIw8qJuPaA8oGxm14toOiXRJNDa1kZdFWRBYF+Q+7kP' +
  'CdLgP84hSdJADZVvgm3vF3gbG/oNAAD//wMAUEsDBBQABgAIAAAAIQC29THT/gAAAEsCAAARAAg' +
  'BZG9jUHJvcHMvY29yZS54bWwgogQBKKAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' +
  'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' +
  'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' +
  'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' +
  'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' +
  'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjJJN' +
  'T8MwDIbvSPyHKPdN3RgIte1O7MJxAglVcI5IdE2IJlXicfjvuF3ZYAwd4pbXH/bjyJ0+fcpKfKBx' +
  'UrWYJDEmqLgqhdq3+Ol5c7vCxFpWclYpVC1+QotP68vzTi9LPdAOuPBAWgF1LS6c6zPGbF2jZDZR' +
  'PSp/0yglmU/UHvOeISut5xWLEE1JypRE+W1kVu/SbKKkGlyPP3zBwkq1v5AplnsfKXojvIL1M9xK' +
  'hc5oVOoNlROHDrWoHJfOSbv8F3JVSs87Q/R8OgIw8qJuPaA8oGxm14toOiXRJNDa1kZdFWRBYF+Q' +
  '+7kPCdLgP84hSdJADZVvgm3vF3gbG/oNAAD//wMAUEsDBBQABgAIAAAAIQAQNLRvbgEAAMECAAAR' +
  'AAgBZG9jUHJvcHMvY29yZS54bWwgogQBKKAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' +
  'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' +
  'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' +
  'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' +
  'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' +
  'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlJLL' +
  'TsNADEV3SP0Dy7vGTgtFVZJVVQpaFIkUaNkbMwna2E7sCcvXYycFBAtEtnN97rm24+zyU1biBZzn' +
  'xlSYxDFBpmqR61RW+Ol5s1xg4j0pcy65MRV+BoeXi/m8s5vqEA9YOgg0Mk2Fi/BNTRCO6RoV8bGp' +
  'UeFNqZ3HBW51iqj2CG+5V76gLMdpkhA/jRVFgCbgOVf2z8FavKd8TwuBBYpBBxyinNsQnZOo1Bsq' +
  'Rw4dahU7Ll2Tdvkv5NqWnneG6Pl0BGDsRd16QHlAyUzvFlE0TaJRoLWtjLqsyILAPiD3Yx8S5MF/' +
  'nEMcx4EaKt8EW/5Y8DY29AsAAP//AwBQSwMEFAAGAAgAAAAhAG7x97WLBwAAsyAAABUAAAB3b3Jk' +
  'L3RoZW1lL3RoZW1lMS54bWzsWU9v2zYUvw/YdxB0b2w5ThrbgePAiZN1aJoEddbtSEu0xYYiVZKy' +
  '03672yBr0W2HFRu2w4DdJuzQ9dIV27B9ihEU0I/qp9hPou04TrMsTZsCxUGXSH7v8Xfv8dHSxdt' +
  'PFqPoAAuJGU3ajqulbQSnAQ9xOmk7n9wf3Vh3IkmxE4c4YilvO0ss7Lv3P/hgE21IgSMMlFDatj' +
  'ORYnPdceRghCXBa2yOUzgzYiwJEX5lJo6cY4zDeqOza65XXTcipEnaLkJ09HTGwwC7IwKJwzINsZ' +
  'OJBFyhg3qbww4VCAeRACKIdQxYnEmZPt61xcU6FdHOMDvZq8uWp8NhOvExPbdP4jP5/PIiu4GWU' +
  'G2zT/z0sHvTl/23+sOjfIBHJ2I6NR69+fXo9e+Hjj+Z+CZx2fvk5Mmr35/++fm3S0Do3YeBt+GQ' +
  'xZFwmS7dDw5fPH30xYvHf379yKvtCjIeeG+iMOJow8WPwmj/bXg1+pO7tQc8xvq9Qfwl+H+dRPCv' +
  'k0BXfwlqUKP/VbqFal/1BtD7CldXUQdXXagLqq0IjcvUWy5/Ei90oUv10W+uIpCXQfpT5d11hpkj' +
  'lSbOD6iUEkvEaYBPzrg8wjPUdnxAZojS6S6SEjkzjXgKWQhZjinQpGR8xrSr65AjKbw0tFahLe/O' +
  '1wjJSdMXB8x9lbMa9v0D9rCe8VXIY94MYM+YHM4HXI6SIx4dz4AQ/2XA7BNpQTN9QxFoNjSXCBsK' +
  '3l3hEzpWDJJIEBl1KK6jCEvFgDMdTdQu8DCPKGp7SuIrD53hHg/b3htGFIzlWELhv9nqg4X2DdCv' +
  'VUg5UcF0wOdQ3hOFLEQLVbPTCk4k+DuEPi5kOBE0AX6MBMsklukBm0IIchVYpBHOgU8hQzNGIcdE' +
  'DdRgLQ3Xo1SKXGWaYBFKKjXe5DdGwpHQ1h0CIpWkdMBPoRjIaQK5jCKDMmEiwT0yR+gAk1AhY0Gm' +
  '7UD0M0onXLtHFX1CMgfb1GiDXwhVnA1wW7RQXO5CsMKJIbFjH8c2vO/hXQu0gxPaGF9xvVZVgbmR' +
  'yZBOokBZxz+s+mMwdSF1Y8Vq02/VXFW9PNqSaIOvg5WwYmzOzcDKl3HRdrxNt+l2m61a3VepN1vN' +
  '/Zzr8f7YKrZRb7q+u+bVXc9f92qbm7BX23Tb9e6GV2+++1jUa+z/PW1z03XX/E23WdsI/IA+yW8x' +
  '//4m8r8frvznR/qMGmnIiNHzV0lhm4NLdQiglC6xoCfH6vv0aFemBxnQnwsytwi0ZfPsYlcxlk8v' +
  'L53N0DdU10Tke/RhkJ/m7BpBmjrO2M3d+vfk6EtmBv8L3m8R4YQG0t0uXXtIwvAVAk2fSNM3j4k0' +
  'E3PtBX7txl2jvhR1TdVcE2sXW7/Yl/QrqP9a09fkG9nwAUx6Qx46xgTBvd+CVVZ/+auv1RGu+FuB' +
  'i9dgpeC+m08Zz2I9R7y9u0jTlg9+pG0/w7d+pmfbQj1qdA0cdbqN+qpTdtfcVrPjrnf9Vqfeeuc7' +
  'X6u//vkbWFdvK2SbbnOz26j7redfAhQVs81et9VwN+v1tfp6r+G23bXNBtjxz2/92q84rz74zlfX' +
  '15+v/u+JXpNt+Ks7/V7drXfeuU5rA/zfrG95a37dd9c2qj8QfdfL5h1Tb/mqcE/U+1K0B6x8Yv4t' +
  'IYx7BNl3Dqb3kAbRGpLPuJoTVqmA8AlXGxXGEwWrH+w6wvjLQkflzqjqRDqEuqeWHfUmPeFIRRbF' +
  'KaGO3fScFJMk0BvpW1Ct7TJcQNl7R3gEWHtP8EDI0HFAfDkfYwXEO2VVB9Z/Wn8DAAD//wMAUEsD' +
  'BBQABgAIAAAAIQCTdtZJGAEAAEACAAAQAAgBZG9jUHJvcHMvYXBwLnhtbCCiBAEooAABAAAAAAAA' +
  'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' +
  'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' +
  'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' +
  'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' +
  'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnFLL' +
  'TsNADEX3SP0Dy7vGTgtFVZJVVQpaFIkUaNkbMwna2E7sCcvXYycFBAtEtnN97rm24+zyU1biBZzn' +
  'xlSYxDFBpmqR61RW+Ol5s1xg4j0pcy65MRV+BoeXi/m8s5vqEA9YOgg0Mk2Fi/BNTRCO6RoV8bGp' +
  'UeFNqZ3HBW51iqj2CG+5V76gLMdpkhA/jRVFgCbgOVf2z8FavKd8TwuBBYpBBxyinNsQnZOo1Bsq' +
  'Rw4dahU7Ll2Tdvkv5NqWnneG6Pl0BGDsRd16QHlAyUzvFlE0TaJRoLWtjLqsyILAPiD3Yx8S5MF/' +
  'nEMcx4EaKt8EW/5Y8DY29AsAAP//AwBQSwMEFAAGAAgAAAAhAMdlwvdYAQAAwgIAABEAAABkb2NQ' +
  'cm9wcy9jb3JlLnhtbJSRzUrEMBCG7wr3EJa9r127/oDUxZ/VgwhePJc0nbbBNAlJVrtv7xTXVVgQ' +
  'PYXJfN/MM+nkZlNn7xaCtqaiLA8YtUY6rkyqaPTY3106zAaHSupaGqro1jp6M7+8yGZa7i22VniQzi' +
  'qjasUb7wuMjWisBZO7Fo1/aZU14OFTtdhsLVivasoJSdI8xiCtDnqPEa9K3dgRXbLm4IW26DY28Z' +
  '5dG/S+gHW73Hkp0eOP+h5tY8EegPQrHuTwTse/dPwPx7/SHfjxS3EL/rnwDN4Zd02YqOv/aO0H//' +
  'Hg82+APafsl93hPQIe0W+l0x+cWBXIb2VsjkRNWvFOH7eO0h6lPUx7nPZ07WncU7inp0cfB+7p6/' +
  'HH0Tu4e/xn9AYAAP//AwBQSwMEFAAGAAgAAAAhALb1MdP+AAAASwIAABEAAABkb2NQcm9wcy9jb3' +
  'JlLnhtbIySS07DMBBFD0hcYeQ1ih0oqlJV6UpsQFRdexM7kWt/ZE9avD12UpYssrTO/O+N/H5zj6' +
  'J4VqYNkhgrUCAsVx1tbYU/fy7vbiDxjLRMC8sq/AKCt/XXq/KobC89ODQE5qGtcOe5L0Pi2A4dcw' +
  'ntIfFnCx45L3vksEfIOnSykchhSkiK6Y2qeAfjHMG1cH9GqCZ83NE+YTVg7R+Q1m2bDWv2I/B1X5' +
  '6vP17u7vEjE8/oSZom1hbC3XOlRY/fA82gvRpan3+w10/lrI1u0Z4M/2bYzPPkf5H/AAAA//8DAF' +
  'BLAwQUAAYACAAAACEAtvUx0/4AAABLAgAAEQAAAGRvY1Byb3BzL2NvcmUueG1sjJJLTsNADEV3SF' +
  '5hZDWKHSiqUlXpSmxAVF17EzuRa39kT1q+PXZSliwwtM7874388lNWogWc58ZUmMQxQaZqketUVv' +
  'jpeXO7wsR7UuZccmMq/AwOLxfzeWc31SEesHQQaGSaChfhm5ogHNM1KuJjU6PCm1I7jwvc6hRR7R' +
  'HecK98QVmO0yQhfhoriggNwHOu7J+DtXhP+Z4WAgsUgw44RDm3ITonUak3VI4cOtQqdly6Ju3yX8' +
  'i1LT3vDNHz6QjA2Iu69YDygJKZ3i2iaJpEo0BrWxl1WZEFgX1A7sc+JMiD/ziHOI4DNVS+Cbb8se' +
  'BtbOgXAAD//wMAUEsDBBQABgAIAAAAIQBvppC2XQIAAJUGAAAVAAAAd29yZC90aGVtZS90aGVtZT' +
  'EueG1s7FlNi9swEL0X+h8M92TtL5YlhNjZZLstbCGku6eivbaxkC1RkuPdr1+Zlv0RJ04WSnronR' +
  'iN5r03jzQ6vfiQl8E7whVmZBGGk0kYIMKTNGXZehF+e3V2cRYGSmOSYkYzsohuiAovT37+abFndF' +
  'AQQoMAlgqzQJdFUAnimq/NxrBIVckrymF6iShUDo4+gCvvB6KHRD9RD+F6Yfn+0eLM8c8WZ46d8m' +
  'dnMB5w5YQr76f49yjxPqXf11+u3c9/++q+/vmvv9vP/zifb7pX+t+y0uDy5WyLG+jIXJiXYq9qKo' +
  'HkzZsT5nNfhrnM9TFPkWuefQmNFGhgO55gmRWDvFV/9WM5jMsb2EvY8dLYdgYzQ9rPczEHsYTO' +
  'm/G+1Xo2WzmM7Z+bjp1Rq2VaYPqn/0TwO1VQDhkgIcAu7w9vYk9aI2k/xpZp2ZdRnDFc+Iy0nG' +
  'W47LTazjj85QP0FLnT+I3KN7bcLPVldAyPHk1Ov+x+3j6YZ3M4pO/0KbdvJ3rXHmKznl07hDUr47' +
  'F9bdKevTwwdnBwcGl6/uEA5d/raxMZhzgvzLSNUNqyEUrblm1sQ9rasdFGWo7hdqW0LeOhNO0jlL' +
  'a0EcqzrfYlSsvOzgWlNfunKO0+7JzS9uxe/GnpQdq+Lbk8hN3+2ZB2biPsI+7lpPAsFnsjT/xF8A' +
  '0cITwDXMxOj/Mb32UAvp+B5/fH9GWfAj8YAb8bAg/uAgZeSxqJqE/HtZj+2/jAFtRdOp7NGufDYQ' +
  'vcjB3DuMRmPcMsC4J9SzTRQO/kGH+uHT8fGv2yZb2OMh8cZzAcZI1jm5+xJSBhAzTqiG7PcF2/Pz' +
  '+Ej/R9ACODD8q9VF8x/ZcP0E9f0B++AjfTy9/L8dQvvwEAAP//AwBQSwMEFAAGAAgAAAAhAJN21k' +
  'kYAQAAQAIAABAACARkb2NQcm9wcy9hcHAueG1sIKIEASigAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' +
  'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' +
  'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' +
  'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' +
  'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnFLLTsNADEX' +
  '3SP0Dy7vGTgtFVZJVVQpaFIkUaNkbMwna2E7sCcvXYycFBAtEtnN97rm24+zyU1biBZznxlSYxD' +
  'FBpmqR61RW+Ol5s1xg4j0pcy65MRV+BoeXi/m8s5vqEA9YOgg0Mk2Fi/BNTRCO6RoV8bGpUeFNqZ' +
  '3HBW51iqj2CG+5V76gLMdpkhA/jRVFgCbgOVf2z8FavKd8TwuBBYpBBxyinNsQnZOo1BsqRw4dah' +
  'U7Ll2Tdvkv5NqWnneG6Pl0BGDsRd16QHlAyUzvFlE0TaJRoLWtjLqsyILAPiD3Yx8S5MF/nEMcx4' +
  'EaKt8EW/5Y8DY29AsAAP//AwBQSwECLQAUAAYACAAAACEA3GppMpEBAAAsB wAAEwAAAAAAAAAAAAAA' +
  'AAAAAAAAAAAAW0NvbnRlbnRfVHlwZXNdLnhtbFBLAQItABQABgAIAAAAIQAekRq37wAAAE4CAAALA' +
  'AAAAAAAAAAAAAAAAMoDAABfcmVscy8ucmVsc1BLAQItABQABgAIAAAAIQC29THT/gAAAEsCAAAQAA' +
  'AAAAAAAAAAAAAAAOYGAABZG9jUHJvcHMvYXBwLnhtbFBLAQItABQABgAIAAAAIQAQNLRvbgEAAME' +
  'CAAARAAAAAAAAAAAAAAAAABgKAABkb2NQcm9wcy9jb3JlLnhtbFBLAQItABQABgAIAAAAIQBu8fe1' +
  'iwcAALMgAAAVAAAAAAAAAAAAAAAAALsNAAB3b3JkL3RoZW1lL3RoZW1lMS54bWxQSwECLQAUAAYAC' +
  'AAAACEAlYgI5UEBAABRAgAAFAAAAAAAAAAAAAAAAAB/FQAAZ29yZC93ZWJTZXR0aW5ncy54bWxQSw' +
  'ECLQAUAAYACAAAACEASje9Z88DAABkDQAADwAAAAAAAAAAAAAAAAD2FwAAd29yZC9zdHlsZXMueG1' +
  'sUEsBAi0AFAAGAAgAAAAhAMeZ0QmUBgAAtxoAABEAAAAAAAAAAAAAAAAAshsAAHdvcmQvc2V0dGlu' +
  'Z3MueG1sUEsBAi0AFAAGAAgAAAAhAJN21kkYAQAAQAIAABAAAAAAAAAAAAAAAAAAsy IAAGRVMY1B' +
  'wcHMueG1sUEsBAi0AFAAGAAgAAAAhALb1MdP+AAAASwIAABEAAAAAAAAAAAAAAAAAASUAAGRvY1B' +
  'yb3BzL2NvcmUueG1sUEsBAi0AFAAGAAgAAAAhAJN21kkYAQAAQAIAABAAAAAAAAAAAAAAAAAAOCgA' +
  'AGRVZY1Byb3BzL2FwcC54bWxQSwECLQAUAAYACAAAACEAb6aQtl0CAACVBgAAFQAAAAAAAAAAAAA' +
  'AAACGKgAAd29yZC90aGVtZS90aGVtZTEueG1sUEsBAi0AFAAGAAgAAAAhAMdlwvdYAQAAwgIAABEA' +
  'AAAAAAAAAAAAAAAAEi0AAGRVYY1Byb3BzL2NvcmUueG1sUEsBAi0AFAAGAAgAAAAhALb1MdP+AA' +
  'AASwIAABEAAAAAAAAAAAAAAAAAIjAAAGRvY1Byb3BzL2NvcmUueG1sUEsBAi0AFAAGAAgAAAAhAG+' +
  'mkLZdAgAAlQYAABUAAAAAAAAAAAAAAAAAVTIAAHdvcmQvdGhlbWUvdGhlbWUxLnhtbFBLAQItABQA' +
  'BgAIAAAAIQCViAjlQQEAAFECAAAUAAAAAAAAAAAAAAAAAOE0AAB3b3JkL3dlYlNldHRpbmdzLnhtb' +
  'FBLBQYAAAAAEAAQAMIDAABYNgAAAAA=';

export async function generateWordDocument(formData: FormData, connections: WeldConnection[]) {
  try {
    const dataForTemplate = {
      lab_name: formData.labName,
      certificate: formData.certificate,
      norm_doc: formData.normDoc,
      otk_number: formData.otkNumber,
      radiation_source: formData.radiationSource,
      detector: formData.detector,
      protective_screen: formData.protectiveScreen,
      amplifier: formData.amplifier,
      vik_number: formData.vikNumber,
      vik_date: formData.vikDate,
      conclusion_number: formData.conclusionNumber,
      conclusion_date: new Date(formData.conclusionDate).toLocaleDateString('ru-RU'),
      object_name: formData.objectName,
      quality_level: formData.qualityLevel,
      control_volume: formData.controlVolume,
      route_name: formData.routeName,
      pipeline_section: formData.pipelineSection,
      contractor: formData.contractor,
      customer: formData.customer,
      welder_mark: formData.welderMark,
      controller_name: formData.controllerName,
      controller_level: formData.controllerLevel,
      controller_certificate: formData.controllerCertificate,
      control_date: new Date(formData.controlDate).toLocaleDateString('ru-RU'),
      connections: connections.map(conn => ({
        number: conn.number,
        diameter: conn.diameter,
        section: conn.section,
        sensitivity: conn.sensitivity,
        coordinates: conn.coordinates,
        defects: conn.defects,
        conclusion: conn.conclusion,
        notes: conn.notes,
      })),
    };

    const response = await fetch('https://functions.poehali.dev/aad88013-11b5-4bbe-9acd-697f931f1b73', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        template: TEMPLATE_BASE64,
        data: dataForTemplate,
      }),
    });

    const result = await response.json();

    if (result.file) {
      const blob = new Blob(
        [Uint8Array.from(atob(result.file), (c) => c.charCodeAt(0))],
        { type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' }
      );
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `Заключение_${formData.conclusionNumber}.docx`;
      link.click();
      URL.revokeObjectURL(url);
    } else {
      throw new Error('Не удалось получить файл от сервера');
    }
  } catch (error) {
    console.error('Ошибка генерации Word документа:', error);
    throw error;
  }
}
